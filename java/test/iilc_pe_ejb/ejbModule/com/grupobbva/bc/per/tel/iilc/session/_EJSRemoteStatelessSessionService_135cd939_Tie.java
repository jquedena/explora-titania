// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.grupobbva.bc.per.tel.iilc.session;

import com.grupobbva.bc.per.tel.iilc.serializable.Area;
import com.grupobbva.bc.per.tel.iilc.serializable.Cliente;
import com.grupobbva.bc.per.tel.iilc.serializable.Empresa;
import com.grupobbva.bc.per.tel.iilc.serializable.Gestor;
import com.grupobbva.bc.per.tel.iilc.serializable.Multitabla;
import com.grupobbva.bc.per.tel.iilc.serializable.Oficina;
import com.grupobbva.bc.per.tel.iilc.serializable.Perfil;
import com.grupobbva.bc.per.tel.iilc.serializable.PermisoPerfil;
import com.grupobbva.bc.per.tel.iilc.serializable.Territorio;
import com.grupobbva.bc.per.tel.iilc.serializable.Total;
import com.stefanini.pe.framework.collections.DataTable;
import java.io.Serializable;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.util.Vector;
import javax.ejb.CreateException;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.FinderException;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.Delegate;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;

public class _EJSRemoteStatelessSessionService_135cd939_Tie extends org.omg.CORBA_2_3.portable.ObjectImpl implements Tie {
    
    private EJSRemoteStatelessSessionService_135cd939 target = null;
    private ORB orb = null;
    
    private static final String[] _type_ids = {
        "RMI:com.grupobbva.bc.per.tel.iilc.session.SessionService:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000", 
        "RMI:com.ibm.websphere.csi.CSIServant:0000000000000000", 
        "RMI:com.ibm.websphere.csi.TransactionalObject:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (EJSRemoteStatelessSessionService_135cd939) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        if (orb != null) {
            orb.disconnect(this);
            _set_delegate(null);
        }
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public void _set_delegate(Delegate del) {
        super._set_delegate(del);
        if (del != null)
            orb = _orb();
        else
            orb = null;
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.hashCode()) {
                case -1939780117: 
                    if (method.equals("countCliente")) {
                        return countCliente(in, reply);
                    }
                case -1886862332: 
                    if (method.equals("countClientebyGestor")) {
                        return countClientebyGestor(in, reply);
                    }
                case -1715926570: 
                    if (method.equals("deletePermisoPerfil")) {
                        return deletePermisoPerfil(in, reply);
                    }
                case -1550521068: 
                    if (method.equals("_get_EJBHome")) {
                        return _get_EJBHome(in, reply);
                    }
                case -1511811901: 
                    if (method.equals("deleteTerritorios")) {
                        return deleteTerritorios(in, reply);
                    }
                case -1511177823: 
                    if (method.equals("findComponente")) {
                        return findComponente(in, reply);
                    }
                case -1340566841: 
                    if (method.equals("deleteTotales")) {
                        return deleteTotales(in, reply);
                    }
                case -1296550335: 
                    if (method.equals("findAllEmpresa")) {
                        return findAllEmpresa(in, reply);
                    }
                case -1274448575: 
                    if (method.equals("findNV")) {
                        return findNV(in, reply);
                    }
                case -1274077648: 
                    if (method.equals("findGestorxRegistro")) {
                        return findGestorxRegistro(in, reply);
                    }
                case -1200999347: 
                    if (method.equals("createMultitabla")) {
                        return createMultitabla(in, reply);
                    }
                case -1187862178: 
                    if (method.equals("createCliente")) {
                        return createCliente(in, reply);
                    }
                case -1149591909: 
                    if (method.equals("deleteAreas")) {
                        return deleteAreas(in, reply);
                    }
                case -1144567676: 
                    if (method.equals("deleteClientes")) {
                        return deleteClientes(in, reply);
                    }
                case -1039985675: 
                    if (method.equals("updatePerfil")) {
                        return updatePerfil(in, reply);
                    }
                case -1011244123: 
                    if (method.equals("_get_primaryKey")) {
                        return _get_primaryKey(in, reply);
                    }
                case -934610812: 
                    if (method.equals("remove")) {
                        return remove(in, reply);
                    }
                case -859787433: 
                    if (method.equals("deletePerfil")) {
                        return deletePerfil(in, reply);
                    }
                case -854269995: 
                    if (method.equals("deleteEmpresas")) {
                        return deleteEmpresas(in, reply);
                    }
                case -679787900: 
                    if (method.equals("findATOG")) {
                        return findATOG(in, reply);
                    }
                case -527740551: 
                    if (method.equals("findAllMultitabla")) {
                        return findAllMultitabla(in, reply);
                    }
                case -505444665: 
                    if (method.equals("countClientebyTerritorio")) {
                        return countClientebyTerritorio(in, reply);
                    }
                case -503871576: 
                    if (method.equals("createTotal")) {
                        return createTotal(in, reply);
                    }
                case -296284300: 
                    if (method.equals("findEtiSeg")) {
                        return findEtiSeg(in, reply);
                    }
                case -288432876: 
                    if (method.equals("findAllPerfil")) {
                        return findAllPerfil(in, reply);
                    }
                case -252425668: 
                    if (method.equals("deleteMultitabla")) {
                        return deleteMultitabla(in, reply);
                    }
                case -234070663: 
                    if (method.equals("findAllPermisoPerfil")) {
                        return findAllPermisoPerfil(in, reply);
                    }
                case -231612519: 
                    if (method.equals("findAllRecord")) {
                        return findAllRecord(in, reply);
                    }
                case -85679909: 
                    if (method.equals("deleteGestores")) {
                        return deleteGestores(in, reply);
                    }
                case -15257638: 
                    if (method.equals("updateMultitabla")) {
                        return updateMultitabla(in, reply);
                    }
                case -6608520: 
                    if (method.equals("deleteAllGestor")) {
                        return deleteAllGestor(in, reply);
                    }
                case 5070053: 
                    if (method.equals("findPerfil")) {
                        return findPerfil(in, reply);
                    }
                case 61890410: 
                    if (method.equals("findRecord")) {
                        return findRecord(in, reply);
                    }
                case 165786409: 
                    if (method.equals("countClientebyOficina")) {
                        return countClientebyOficina(in, reply);
                    }
                case 204701898: 
                    if (method.equals("findMultitabla")) {
                        return findMultitabla(in, reply);
                    }
                case 210410021: 
                    if (method.equals("createPermisoPerfil")) {
                        return createPermisoPerfil(in, reply);
                    }
                case 328513614: 
                    if (method.equals("datosEmpresa")) {
                        return datosEmpresa(in, reply);
                    }
                case 394695369: 
                    if (method.equals("listaDetalleFiltroComplejo")) {
                        return listaDetalleFiltroComplejo(in, reply);
                    }
                case 406303952: 
                    if (method.equals("datosOficina")) {
                        return datosOficina(in, reply);
                    }
                case 419799307: 
                    if (method.equals("findTotal")) {
                        return findTotal(in, reply);
                    }
                case 425917862: 
                    if (method.equals("findEtiquetas")) {
                        return findEtiquetas(in, reply);
                    }
                case 465027856: 
                    if (method.equals("listaEtiquetasPorCodigo")) {
                        return listaEtiquetasPorCodigo(in, reply);
                    }
                case 622617581: 
                    if (method.equals("createEmpresa")) {
                        return createEmpresa(in, reply);
                    }
                case 655815119: 
                    if (method.equals("deleteCliente")) {
                        return deleteCliente(in, reply);
                    }
                case 665226177: 
                    if (method.equals("createTerritorio")) {
                        return createTerritorio(in, reply);
                    }
                case 700407919: 
                    if (method.equals("createOficina")) {
                        return createOficina(in, reply);
                    }
                case 747229120: 
                    if (method.equals("datosTerritorio")) {
                        return datosTerritorio(in, reply);
                    }
                case 891842941: 
                    if (method.equals("datosGestor")) {
                        return datosGestor(in, reply);
                    }
                case 933786463: 
                    if (method.equals("findFamilias")) {
                        return findFamilias(in, reply);
                    }
                case 1178424830: 
                    if (method.equals("createGestor")) {
                        return createGestor(in, reply);
                    }
                case 1211488228: 
                    if (method.equals("findAllGestorxOfxTe")) {
                        return findAllGestorxOfxTe(in, reply);
                    }
                case 1264756395: 
                    if (method.equals("isIdentical")) {
                        return isIdentical(in, reply);
                    }
                case 1266086278: 
                    if (method.equals("findPerfilxRegistro")) {
                        return findPerfilxRegistro(in, reply);
                    }
                case 1338484973: 
                    if (method.equals("findAllTerritorio")) {
                        return findAllTerritorio(in, reply);
                    }
                case 1368655785: 
                    if (method.equals("createArea")) {
                        return createArea(in, reply);
                    }
                case 1436043752: 
                    if (method.equals("createPerfil")) {
                        return createPerfil(in, reply);
                    }
                case 1454052206: 
                    if (method.equals("listaDetalleFiltroSimple")) {
                        return listaDetalleFiltroSimple(in, reply);
                    }
                case 1455432316: 
                    if (method.equals("findMultitablaxValor2")) {
                        return findMultitablaxValor2(in, reply);
                    }
                case 1525063816: 
                    if (method.equals("findPermisoPerfil")) {
                        return findPermisoPerfil(in, reply);
                    }
                case 1557230483: 
                    if (method.equals("deleteOficinas")) {
                        return deleteOficinas(in, reply);
                    }
                case 1574567782: 
                    if (method.equals("findAllOficinaxTe")) {
                        return findAllOficinaxTe(in, reply);
                    }
                case 1696593409: 
                    if (method.equals("findCliente")) {
                        return findCliente(in, reply);
                    }
                case 1739901265: 
                    if (method.equals("findEtiquetasSegmentos")) {
                        return findEtiquetasSegmentos(in, reply);
                    }
                case 1894256590: 
                    if (method.equals("findGestorMasaOficina")) {
                        return findGestorMasaOficina(in, reply);
                    }
                case 1944413392: 
                    if (method.equals("_get_handle")) {
                        return _get_handle(in, reply);
                    }
                case 2062302876: 
                    if (method.equals("findCantidadSegmentos")) {
                        return findCantidadSegmentos(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    private OutputStream _get_EJBHome(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBHome result = target.getEJBHome();
        OutputStream out = reply.createReply();
        Util.writeRemoteObject(out,result);
        return out;
    }
    
    private OutputStream _get_primaryKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Object result = target.getPrimaryKey();
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream remove(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        try {
            target.remove();
        } catch (RemoveException ex) {
            String id = "IDL:javax/ejb/RemoveEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,RemoveException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_handle(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Handle result = target.getHandle();
        OutputStream out = reply.createReply();
        Util.writeAbstractObject(out,result);
        return out;
    }
    
    private OutputStream isIdentical(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBObject arg0 = (EJBObject) in.read_Object(EJBObject.class);
        boolean result = target.isIdentical(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream createCliente(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Cliente arg0 = (Cliente) in.read_value(Cliente.class);
        boolean result = target.createCliente(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream createTotal(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Total arg0 = (Total) in.read_value(Total.class);
        boolean result = target.createTotal(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream findCliente(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        int arg0 = in.read_long();
        Cliente result;
        try {
            result = target.findCliente(arg0);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Cliente.class);
        return out;
    }
    
    private OutputStream findAllRecord(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Vector result;
        try {
            result = target.findAllRecord(arg0);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findRecord(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Multitabla result;
        try {
            result = target.findRecord(arg0);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Multitabla.class);
        return out;
    }
    
    private OutputStream findMultitablaxValor2(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Vector result;
        try {
            result = target.findMultitablaxValor2(arg0);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findTotal(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        String arg3 = (String) in.read_value(String.class);
        Total result;
        try {
            result = target.findTotal(arg0, arg1, arg2, arg3);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Total.class);
        return out;
    }
    
    private OutputStream findComponente(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        PermisoPerfil result;
        try {
            result = target.findComponente(arg0, arg1, arg2);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PermisoPerfil.class);
        return out;
    }
    
    private OutputStream createArea(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Area arg0 = (Area) in.read_value(Area.class);
        boolean result = target.createArea(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream createOficina(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Oficina arg0 = (Oficina) in.read_value(Oficina.class);
        boolean result = target.createOficina(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream createGestor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Gestor arg0 = (Gestor) in.read_value(Gestor.class);
        boolean result = target.createGestor(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream findAllMultitabla(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Vector result = target.findAllMultitabla();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findAllPerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Vector result = target.findAllPerfil();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findAllPermisoPerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Vector result = target.findAllPermisoPerfil();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream createMultitabla(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Multitabla arg0 = (Multitabla) in.read_value(Multitabla.class);
        boolean result = target.createMultitabla(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream createPerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Perfil arg0 = (Perfil) in.read_value(Perfil.class);
        boolean result = target.createPerfil(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream createPermisoPerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PermisoPerfil arg0 = (PermisoPerfil) in.read_value(PermisoPerfil.class);
        boolean result = target.createPermisoPerfil(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream findPerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Perfil result = target.findPerfil(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Perfil.class);
        return out;
    }
    
    private OutputStream findPermisoPerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        int arg1 = in.read_long();
        String arg2 = (String) in.read_value(String.class);
        PermisoPerfil result = target.findPermisoPerfil(arg0, arg1, arg2);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PermisoPerfil.class);
        return out;
    }
    
    private OutputStream findMultitabla(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        Multitabla result = target.findMultitabla(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Multitabla.class);
        return out;
    }
    
    private OutputStream deleteMultitabla(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        boolean result = target.deleteMultitabla(arg0, arg1);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deletePerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        boolean result = target.deletePerfil(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deletePermisoPerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        int arg1 = in.read_long();
        String arg2 = (String) in.read_value(String.class);
        boolean result = target.deletePermisoPerfil(arg0, arg1, arg2);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream updateMultitabla(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Multitabla arg0 = (Multitabla) in.read_value(Multitabla.class);
        boolean result = target.updateMultitabla(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream updatePerfil(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Perfil arg0 = (Perfil) in.read_value(Perfil.class);
        boolean result = target.updatePerfil(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream createTerritorio(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Territorio arg0 = (Territorio) in.read_value(Territorio.class);
        boolean result;
        try {
            result = target.createTerritorio(arg0);
        } catch (CreateException ex) {
            String id = "IDL:javax/ejb/CreateEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,CreateException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteAllGestor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        boolean result = target.deleteAllGestor(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteCliente(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        int arg0 = in.read_long();
        boolean result = target.deleteCliente(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream findAllEmpresa(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Vector result = target.findAllEmpresa();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream createEmpresa(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Empresa arg0 = (Empresa) in.read_value(Empresa.class);
        boolean result = target.createEmpresa(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream findPerfilxRegistro(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String result = target.findPerfilxRegistro(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream findEtiquetas(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Vector result = target.findEtiquetas();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findEtiquetasSegmentos(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DataTable arg0 = (DataTable) in.read_value(DataTable.class);
        DataTable result = target.findEtiquetasSegmentos(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DataTable.class);
        return out;
    }
    
    private OutputStream findCantidadSegmentos(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        int result = target.findCantidadSegmentos();
        OutputStream out = reply.createReply();
        out.write_long(result);
        return out;
    }
    
    private OutputStream findGestorxRegistro(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        Vector result = target.findGestorxRegistro(arg0, arg1, arg2);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findEtiSeg(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        Vector result = target.findEtiSeg(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findNV(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        Vector result = target.findNV(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findFamilias(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Vector result = target.findFamilias();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream listaEtiquetasPorCodigo(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String[] result = target.listaEtiquetasPorCodigo(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(cast_array(result),String[].class);
        return out;
    }
    
    private OutputStream listaDetalleFiltroSimple(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String[] arg1 = (String[]) in.read_value(String[].class);
        Vector result = target.listaDetalleFiltroSimple(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream listaDetalleFiltroComplejo(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String[] arg2 = (String[]) in.read_value(String[].class);
        Vector result = target.listaDetalleFiltroComplejo(arg0, arg1, arg2);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream deleteTotales(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        boolean result = target.deleteTotales();
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteClientes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        boolean result = target.deleteClientes();
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteGestores(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        boolean result = target.deleteGestores();
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteOficinas(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        boolean result = target.deleteOficinas();
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteTerritorios(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        boolean result = target.deleteTerritorios();
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteAreas(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        boolean result = target.deleteAreas();
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream deleteEmpresas(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        boolean result = target.deleteEmpresas();
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream countCliente(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        int result = target.countCliente();
        OutputStream out = reply.createReply();
        out.write_long(result);
        return out;
    }
    
    private OutputStream countClientebyTerritorio(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        int result = target.countClientebyTerritorio(arg0);
        OutputStream out = reply.createReply();
        out.write_long(result);
        return out;
    }
    
    private OutputStream countClientebyOficina(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        int result = target.countClientebyOficina(arg0, arg1);
        OutputStream out = reply.createReply();
        out.write_long(result);
        return out;
    }
    
    private OutputStream countClientebyGestor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        int result = target.countClientebyGestor(arg0, arg1, arg2);
        OutputStream out = reply.createReply();
        out.write_long(result);
        return out;
    }
    
    private OutputStream datosTerritorio(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Territorio result = target.datosTerritorio(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Territorio.class);
        return out;
    }
    
    private OutputStream datosGestor(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Gestor result = target.datosGestor(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Gestor.class);
        return out;
    }
    
    private OutputStream datosOficina(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Oficina result = target.datosOficina(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Oficina.class);
        return out;
    }
    
    private OutputStream datosEmpresa(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Empresa result = target.datosEmpresa(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Empresa.class);
        return out;
    }
    
    private OutputStream findAllTerritorio(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Vector result;
        try {
            result = target.findAllTerritorio(arg0);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findATOG(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        Vector result;
        try {
            result = target.findATOG(arg0);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findAllOficinaxTe(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        Vector result;
        try {
            result = target.findAllOficinaxTe(arg0, arg1);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    private OutputStream findGestorMasaOficina(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String result = target.findGestorMasaOficina(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream findAllGestorxOfxTe(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        String arg2 = (String) in.read_value(String.class);
        Vector result;
        try {
            result = target.findAllGestorxOfxTe(arg0, arg1, arg2);
        } catch (FinderException ex) {
            String id = "IDL:javax/ejb/FinderEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,FinderException.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Vector.class);
        return out;
    }
    
    // This method is required as a work-around for
    // a bug in the JDK 1.1.6 verifier.
    
    private Serializable cast_array(Object obj) {
        return (Serializable)obj;
    }
}
